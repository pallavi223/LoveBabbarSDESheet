Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3

  private:
    
   void merge(long long arr[], long long low, long long mid, long long right, long long &count){
        long long i= low, j=mid+1, k=low, temp[right];
        while(i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                temp[k]=arr[i];
                i++;
                k++;
            }
            else{
                count = count+ (mid-i+1);
                temp[k]=arr[j];
                j++;
                k++;
            }
        }
        while(i<=mid){
            temp[k] = arr[i];
            i++;
            k++;
        }
        while(j<=right){
            temp[k] = arr[j];
            j++;
            k++;
        }
        for(int p=low; p<=right; p++){
            arr[p] = temp[p];
        }
        
    }
        void mergeSort(long long arr[], long long low, long long right, long long &count){
        if(low<right){
            long long mid = (low+right)/2;
            mergeSort(arr, low, mid, count);
            mergeSort(arr, mid+1, right, count);
            merge(arr, low, mid, right, count);
        }
    }
    
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
       
        long long count=0;
        mergeSort(arr,0,N-1,count);
       
       return count;
    }
